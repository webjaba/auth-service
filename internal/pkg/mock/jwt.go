// Code generated by MockGen. DO NOT EDIT.
// Source: auth-service/internal/pkg/encrypt (interfaces: IJWT)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIJWT is a mock of IJWT interface.
type MockIJWT struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTMockRecorder
}

// MockIJWTMockRecorder is the mock recorder for MockIJWT.
type MockIJWTMockRecorder struct {
	mock *MockIJWT
}

// NewMockIJWT creates a new mock instance.
func NewMockIJWT(ctrl *gomock.Controller) *MockIJWT {
	mock := &MockIJWT{ctrl: ctrl}
	mock.recorder = &MockIJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWT) EXPECT() *MockIJWTMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIJWT) Create(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIJWTMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIJWT)(nil).Create), arg0)
}

// ParseId mocks base method.
func (m *MockIJWT) ParseId(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseId", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseId indicates an expected call of ParseId.
func (mr *MockIJWTMockRecorder) ParseId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseId", reflect.TypeOf((*MockIJWT)(nil).ParseId), arg0)
}
