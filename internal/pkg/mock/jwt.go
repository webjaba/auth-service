// Code generated by MockGen. DO NOT EDIT.
// Source: auth-service/internal/pkg/jwt_token (interfaces: IJWTManager)

// Package mock is a generated GoMock package.
package mock

import (
	domain "auth-service/internal/pkg/domain"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockIJWTManager is a mock of IJWTManager interface.
type MockIJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockIJWTManagerMockRecorder
}

// MockIJWTManagerMockRecorder is the mock recorder for MockIJWTManager.
type MockIJWTManagerMockRecorder struct {
	mock *MockIJWTManager
}

// NewMockIJWTManager creates a new mock instance.
func NewMockIJWTManager(ctrl *gomock.Controller) *MockIJWTManager {
	mock := &MockIJWTManager{ctrl: ctrl}
	mock.recorder = &MockIJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJWTManager) EXPECT() *MockIJWTManagerMockRecorder {
	return m.recorder
}

// CreateFromUser mocks base method.
func (m *MockIJWTManager) CreateFromUser(arg0 *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromUser indicates an expected call of CreateFromUser.
func (mr *MockIJWTManagerMockRecorder) CreateFromUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromUser", reflect.TypeOf((*MockIJWTManager)(nil).CreateFromUser), arg0)
}

// ParseToken mocks base method.
func (m *MockIJWTManager) ParseToken(arg0 string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", arg0)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockIJWTManagerMockRecorder) ParseToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockIJWTManager)(nil).ParseToken), arg0)
}

// Validate mocks base method.
func (m *MockIJWTManager) Validate(arg0 *domain.User, arg1 *jwt.Token) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockIJWTManagerMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIJWTManager)(nil).Validate), arg0, arg1)
}
